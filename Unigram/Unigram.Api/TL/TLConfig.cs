// <auto-generated/>
using System;
using Telegram.Api.Native.TL;

namespace Telegram.Api.TL
{
	public partial class TLConfig : TLObject 
	{
		[Flags]
		public enum Flag : Int32
		{
			PhoneCallsEnabled = (1 << 1),
			TmpSessions = (1 << 0),
			SuggestedLangCode = (1 << 2),
			LangPackVersion = (1 << 2),
		}

		public bool IsPhoneCallsEnabled { get { return Flags.HasFlag(Flag.PhoneCallsEnabled); } set { Flags = value ? (Flags | Flag.PhoneCallsEnabled) : (Flags & ~Flag.PhoneCallsEnabled); } }
		public bool HasTmpSessions { get { return Flags.HasFlag(Flag.TmpSessions); } set { Flags = value ? (Flags | Flag.TmpSessions) : (Flags & ~Flag.TmpSessions); } }
		public bool HasSuggestedLangCode { get { return Flags.HasFlag(Flag.SuggestedLangCode); } set { Flags = value ? (Flags | Flag.SuggestedLangCode) : (Flags & ~Flag.SuggestedLangCode); } }
		public bool HasLangPackVersion { get { return Flags.HasFlag(Flag.LangPackVersion); } set { Flags = value ? (Flags | Flag.LangPackVersion) : (Flags & ~Flag.LangPackVersion); } }

		public Flag Flags { get; set; }
		public Int32 Date { get; set; }
		public Int32 Expires { get; set; }
		public Boolean TestMode { get; set; }
		public Int32 ThisDC { get; set; }
		public TLVector<TLDCOption> DCOptions { get; set; }
		public Int32 ChatSizeMax { get; set; }
		public Int32 MegaGroupSizeMax { get; set; }
		public Int32 ForwardedCountMax { get; set; }
		public Int32 OnlineUpdatePeriodMs { get; set; }
		public Int32 OfflineBlurTimeoutMs { get; set; }
		public Int32 OfflineIdleTimeoutMs { get; set; }
		public Int32 OnlineCloudTimeoutMs { get; set; }
		public Int32 NotifyCloudDelayMs { get; set; }
		public Int32 NotifyDefaultDelayMs { get; set; }
		public Int32 ChatBigSize { get; set; }
		public Int32 PushChatPeriodMs { get; set; }
		public Int32 PushChatLimit { get; set; }
		public Int32 SavedGifsLimit { get; set; }
		public Int32 EditTimeLimit { get; set; }
		public Int32 RatingEDecay { get; set; }
		public Int32 StickersRecentLimit { get; set; }
		public Int32? TmpSessions { get; set; }
		public Int32 PinnedDialogsCountMax { get; set; }
		public Int32 CallReceiveTimeoutMs { get; set; }
		public Int32 CallRingTimeoutMs { get; set; }
		public Int32 CallConnectTimeoutMs { get; set; }
		public Int32 CallPacketTimeoutMs { get; set; }
		public String MeUrlPrefix { get; set; }
		public String SuggestedLangCode { get; set; }
		public Int32? LangPackVersion { get; set; }
		public TLVector<TLDisabledFeature> DisabledFeatures { get; set; }

		public TLConfig() { }
		public TLConfig(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.Config; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (Flag)from.ReadInt32();
			Date = from.ReadInt32();
			Expires = from.ReadInt32();
			TestMode = from.ReadBoolean();
			ThisDC = from.ReadInt32();
			DCOptions = TLFactory.Read<TLVector<TLDCOption>>(from);
			ChatSizeMax = from.ReadInt32();
			MegaGroupSizeMax = from.ReadInt32();
			ForwardedCountMax = from.ReadInt32();
			OnlineUpdatePeriodMs = from.ReadInt32();
			OfflineBlurTimeoutMs = from.ReadInt32();
			OfflineIdleTimeoutMs = from.ReadInt32();
			OnlineCloudTimeoutMs = from.ReadInt32();
			NotifyCloudDelayMs = from.ReadInt32();
			NotifyDefaultDelayMs = from.ReadInt32();
			ChatBigSize = from.ReadInt32();
			PushChatPeriodMs = from.ReadInt32();
			PushChatLimit = from.ReadInt32();
			SavedGifsLimit = from.ReadInt32();
			EditTimeLimit = from.ReadInt32();
			RatingEDecay = from.ReadInt32();
			StickersRecentLimit = from.ReadInt32();
			if (HasTmpSessions) TmpSessions = from.ReadInt32();
			PinnedDialogsCountMax = from.ReadInt32();
			CallReceiveTimeoutMs = from.ReadInt32();
			CallRingTimeoutMs = from.ReadInt32();
			CallConnectTimeoutMs = from.ReadInt32();
			CallPacketTimeoutMs = from.ReadInt32();
			MeUrlPrefix = from.ReadString();
			if (HasSuggestedLangCode) SuggestedLangCode = from.ReadString();
			if (HasLangPackVersion) LangPackVersion = from.ReadInt32();
			DisabledFeatures = TLFactory.Read<TLVector<TLDisabledFeature>>(from);
		}

		public override void Write(TLBinaryWriter to)
		{
			UpdateFlags();

			to.WriteInt32((Int32)Flags);
			to.WriteInt32(Date);
			to.WriteInt32(Expires);
			to.WriteBoolean(TestMode);
			to.WriteInt32(ThisDC);
			to.WriteObject(DCOptions);
			to.WriteInt32(ChatSizeMax);
			to.WriteInt32(MegaGroupSizeMax);
			to.WriteInt32(ForwardedCountMax);
			to.WriteInt32(OnlineUpdatePeriodMs);
			to.WriteInt32(OfflineBlurTimeoutMs);
			to.WriteInt32(OfflineIdleTimeoutMs);
			to.WriteInt32(OnlineCloudTimeoutMs);
			to.WriteInt32(NotifyCloudDelayMs);
			to.WriteInt32(NotifyDefaultDelayMs);
			to.WriteInt32(ChatBigSize);
			to.WriteInt32(PushChatPeriodMs);
			to.WriteInt32(PushChatLimit);
			to.WriteInt32(SavedGifsLimit);
			to.WriteInt32(EditTimeLimit);
			to.WriteInt32(RatingEDecay);
			to.WriteInt32(StickersRecentLimit);
			if (HasTmpSessions) to.WriteInt32(TmpSessions.Value);
			to.WriteInt32(PinnedDialogsCountMax);
			to.WriteInt32(CallReceiveTimeoutMs);
			to.WriteInt32(CallRingTimeoutMs);
			to.WriteInt32(CallConnectTimeoutMs);
			to.WriteInt32(CallPacketTimeoutMs);
			to.WriteString(MeUrlPrefix ?? string.Empty);
			if (HasSuggestedLangCode) to.WriteString(SuggestedLangCode ?? string.Empty);
			if (HasLangPackVersion) to.WriteInt32(LangPackVersion.Value);
			to.WriteObject(DisabledFeatures);
		}

		private void UpdateFlags()
		{
			HasTmpSessions = TmpSessions != null;
			HasSuggestedLangCode = SuggestedLangCode != null;
			HasLangPackVersion = LangPackVersion != null;
		}
	}
}