// <auto-generated/>
using System;

namespace Telegram.Api.TL.Methods.Messages
{
	/// <summary>
	/// RCP method messages.setInlineGameScore
	/// </summary>
	public partial class TLMessagesSetInlineGameScore : TLObject
	{
		[Flags]
		public enum Flag : Int32
		{
			EditMessage = (1 << 0),
			Force = (1 << 1),
		}

		public bool IsEditMessage { get { return Flags.HasFlag(Flag.EditMessage); } set { Flags = value ? (Flags | Flag.EditMessage) : (Flags & ~Flag.EditMessage); } }
		public bool IsForce { get { return Flags.HasFlag(Flag.Force); } set { Flags = value ? (Flags | Flag.Force) : (Flags & ~Flag.Force); } }

		public Flag Flags { get; set; }
		public TLInputBotInlineMessageID Id { get; set; }
		public TLInputUserBase UserId { get; set; }
		public Int32 Score { get; set; }

		public TLMessagesSetInlineGameScore() { }
		public TLMessagesSetInlineGameScore(TLBinaryReader from, bool cache = false)
		{
			Read(from, cache);
		}

		public override TLType TypeId { get { return TLType.MessagesSetInlineGameScore; } }

		public override void Read(TLBinaryReader from, bool cache = false)
		{
			Flags = (Flag)from.ReadInt32();
			Id = TLFactory.Read<TLInputBotInlineMessageID>(from, cache);
			UserId = TLFactory.Read<TLInputUserBase>(from, cache);
			Score = from.ReadInt32();
			if (cache) ReadFromCache(from);
		}

		public override void Write(TLBinaryWriter to, bool cache = false)
		{
			to.Write(0x15AD9F64);
			to.Write((Int32)Flags);
			to.WriteObject(Id, cache);
			to.WriteObject(UserId, cache);
			to.Write(Score);
			if (cache) WriteToCache(to);
		}
	}
}