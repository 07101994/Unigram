// <auto-generated/>
using System;

namespace Telegram.Api.TL.Methods.Updates
{
	/// <summary>
	/// RCP method updates.getChannelDifference
	/// </summary>
	public partial class TLUpdatesGetChannelDifference : TLObject
	{
		[Flags]
		public enum Flag : Int32
		{
			Force = (1 << 0),
		}

		public bool IsForce { get { return Flags.HasFlag(Flag.Force); } set { Flags = value ? (Flags | Flag.Force) : (Flags & ~Flag.Force); } }

		public Flag Flags { get; set; }
		public TLInputChannelBase Channel { get; set; }
		public TLChannelMessagesFilterBase Filter { get; set; }
		public Int32 Pts { get; set; }
		public Int32 Limit { get; set; }

		public TLUpdatesGetChannelDifference() { }
		public TLUpdatesGetChannelDifference(TLBinaryReader from, bool cache = false)
		{
			Read(from, cache);
		}

		public override TLType TypeId { get { return TLType.UpdatesGetChannelDifference; } }

		public override void Read(TLBinaryReader from, bool cache = false)
		{
			Flags = (Flag)from.ReadInt32();
			Channel = TLFactory.Read<TLInputChannelBase>(from, cache);
			Filter = TLFactory.Read<TLChannelMessagesFilterBase>(from, cache);
			Pts = from.ReadInt32();
			Limit = from.ReadInt32();
			if (cache) ReadFromCache(from);
		}

		public override void Write(TLBinaryWriter to, bool cache = false)
		{
			to.Write(0x3173D78);
			to.Write((Int32)Flags);
			to.WriteObject(Channel, cache);
			to.WriteObject(Filter, cache);
			to.Write(Pts);
			to.Write(Limit);
			if (cache) WriteToCache(to);
		}
	}
}