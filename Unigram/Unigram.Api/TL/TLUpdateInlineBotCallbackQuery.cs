// <auto-generated/>
using System;

namespace Telegram.Api.TL
{
	public partial class TLUpdateInlineBotCallbackQuery : TLUpdateBase 
	{
		[Flags]
		public enum Flag : Int32
		{
			Data = (1 << 0),
			GameShortName = (1 << 1),
		}

		public bool HasData { get { return Flags.HasFlag(Flag.Data); } set { Flags = value ? (Flags | Flag.Data) : (Flags & ~Flag.Data); } }
		public bool HasGameShortName { get { return Flags.HasFlag(Flag.GameShortName); } set { Flags = value ? (Flags | Flag.GameShortName) : (Flags & ~Flag.GameShortName); } }

		public Flag Flags { get; set; }

		public TLUpdateInlineBotCallbackQuery() { }
		public TLUpdateInlineBotCallbackQuery(TLBinaryReader from, bool cache = false)
		{
			Read(from, cache);
		}

		public override TLType TypeId { get { return TLType.UpdateInlineBotCallbackQuery; } }

		public override void Read(TLBinaryReader from, bool cache = false)
		{
			Flags = (Flag)from.ReadInt32();
			QueryId = from.ReadInt64();
			UserId = from.ReadInt32();
			MsgId = TLFactory.Read<TLInputBotInlineMessageID>(from, cache);
			ChatInstance = from.ReadInt64();
			if (HasData) Data = from.ReadByteArray();
			if (HasGameShortName) GameShortName = from.ReadString();
			if (cache) ReadFromCache(from);
		}

		public override void Write(TLBinaryWriter to, bool cache = false)
		{
			UpdateFlags();

			to.Write(0xF9D27A5A);
			to.Write((Int32)Flags);
			to.Write(QueryId);
			to.Write(UserId);
			to.WriteObject(MsgId, cache);
			to.Write(ChatInstance);
			if (HasData) to.WriteByteArray(Data);
			if (HasGameShortName) to.Write(GameShortName);
			if (cache) WriteToCache(to);
		}

		private void UpdateFlags()
		{
			HasData = Data != null;
			HasGameShortName = GameShortName != null;
		}
	}
}