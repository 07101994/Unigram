import "inspectable.idl";

#define API_VERSION 1.0

namespace Telegram
{
	namespace Api
	{
		namespace Native
		{

			typedef enum ConnectionType ConnectionType;
			typedef enum ConnectionNeworkType ConnectionNeworkType;
			typedef enum ConnectionState ConnectionState;
			typedef enum HandshakeState HandshakeState;

			interface ITLObject;

			runtimeclass Datacenter;
			runtimeclass Connection;
			runtimeclass ConnectionManager;
			runtimeclass TLBinaryReader;
			runtimeclass TLBinaryWriter;


			[uuid(B93C4F8A-0308-4598-8C0A-52ACC91E45E3)]
			[version(API_VERSION)]
			interface ITLObject : IInspectable
			{
				[propget] HRESULT Size([out][retval] UINT32* value);
				HRESULT Read([in] TLBinaryReader* reader);
				HRESULT Write([in] TLBinaryWriter* writer);
			}


			[exclusiveto(TLBinaryReader)]
			[uuid(7F865F69-62F1-4BC9-AD8C-717D0D8DD7F8)]
			[version(API_VERSION)]
			interface ITLBinaryReader : IInspectable
			{
				HRESULT ReadByte([out][retval] BYTE* value);
				HRESULT ReadInt16([out][retval] INT16* value);
				HRESULT ReadUInt16([out][retval] UINT16* value);
				HRESULT ReadInt32([out][retval] INT32* value);
				HRESULT ReadUInt32([out][retval] UINT32* value);
				HRESULT ReadInt64([out][retval] INT64* value);
				HRESULT ReadUInt64([out][retval] UINT64* value);
				HRESULT ReadBool([out][retval] boolean* value);
				HRESULT ReadString([out][retval] HSTRING* value);
				HRESULT ReadByteArray([out] UINT32* __valueSize,[out][size_is(, *__valueSize)] BYTE** value);
				HRESULT ReadDouble([out][retval] double* value);
				HRESULT ReadFloat([out][retval] float* value);
			}

			//[marshaling_behavior(agile)]
			//[threading(both)]
			[version(API_VERSION)]
			runtimeclass TLBinaryReader
			{
				[default] interface ITLBinaryReader;
			}


			[exclusiveto(TLBinaryWriter)]
			[uuid(732B4B01-0603-4ADB-8F29-24096FCDF7C6)]
			[version(API_VERSION)]
			interface ITLBinaryWriter : IInspectable
			{
				HRESULT WriteByte([in] BYTE value);
				HRESULT WriteInt16([in] INT16 value);
				HRESULT WriteUInt16([in] UINT16 value);
				HRESULT WriteInt32([in] INT32 value);
				HRESULT WriteUInt32([in] UINT32 value);
				HRESULT WriteInt64([in] INT64 value);
				HRESULT WriteUInt64([in] UINT64 value);
				HRESULT WriteBool([in] boolean value);
				HRESULT WriteString([in] HSTRING value);
				HRESULT WriteByteArray([in] UINT32 __valueSize,[in][size_is(__valueSize)] BYTE* value);
				HRESULT WriteDouble([in] double value);
				HRESULT WriteFloat([in] float value);
			}

			/*[marshaling_behavior(agile)]
			[threading(both)]*/
			[version(API_VERSION)]
			runtimeclass TLBinaryWriter
			{
				[default] interface ITLBinaryWriter;
			}


			[version(API_VERSION)]
			enum ConnectionType
			{
				Generic = 1,
				Download = 2,
				Upload = 4
			};

			[version(API_VERSION)]
			enum HandshakeState
			{
				None = 0,
				Started = 1,
				PQ = 2,
				ServerDH = 3,
				ClientDH = 4
			};

			[exclusiveto(Datacenter)]
			[uuid(ACBC9624-7B96-417D-A9F9-A7F93C195C86)]
			[version(API_VERSION)]
			interface IDatacenter : IInspectable
			{
				[propget] HRESULT Id([out][retval] UINT32* value);
				[propget] HRESULT HandshakeState([out][retval] HandshakeState* value);
				HRESULT GetCurrentAddress([in] ConnectionType connectionType,[in] boolean ipv6,[out][retval] HSTRING* value);
				HRESULT GetCurrentPort([in] ConnectionType connectionType,[in] boolean ipv6,[out][retval] UINT32* value);
				//HRESULT GetDownloadConnection([in] UINT32 index,[in] boolean create, [out][retval] Connection** value);
				//HRESULT GetUploadConnection([in] UINT32 index, [in] boolean create, [out][retval] Connection** value);
				//HRESULT GetGenericConnection([in] boolean create, [out][retval] Connection** value);
			}

			[marshaling_behavior(agile)]
			[threading(both)]
			[version(API_VERSION)]
			runtimeclass Datacenter
			{
				[default] interface IDatacenter;
			}


			[version(API_VERSION)]
			enum ConnectionNeworkType
			{
				Mobile = 0,
				WiFi = 1,
				Roaming = 2
			};

			[exclusiveto(Connection)]
			[uuid(108FB951-3940-4FF5-A8A1-ED449D305029)]
			[version(API_VERSION)]
			interface IConnection : IInspectable
			{
				[propget] HRESULT Token([out][retval] UINT32* value);
				[propget] HRESULT Datacenter([out][retval] Datacenter** value);
				[propget] HRESULT Type([out][retval] ConnectionType* value);
				[propget] HRESULT CurrentNetworkType([out][retval] ConnectionNeworkType* value);
				[propget] HRESULT SessionId([out][retval] INT64* value);
			}

			[marshaling_behavior(agile)]
			[threading(both)]
			[version(API_VERSION)]
			runtimeclass Connection
			{
				[default] interface IConnection;
			}


			[version(API_VERSION)]
			enum ConnectionState
			{
				Connecting = 1,
				WaitingForNetwork = 2,
				Connected = 3
			};

			[exclusiveto(ConnectionManager)]
			[uuid(6945B11D-9663-4E6E-B866-7A1AB6A98349)]
			[version(API_VERSION)]
			interface IConnectionManagerStatics : IInspectable
			{
				[propget] HRESULT Instance([out][retval] ConnectionManager** value);
			}

			[exclusiveto(ConnectionManager)]
			[uuid(1C986C1D-56D3-4DA5-8027-5240F0CD2DFF)]
			[version(API_VERSION)]
			interface IConnectionManager : IInspectable
			{
				[propget] HRESULT ConnectionState([out][retval] ConnectionState* value);
				[propget] HRESULT CurrentNetworkType([out][retval] ConnectionNeworkType* value);
				[propget] HRESULT IsIpv6Enabled([out][retval] boolean* value);
				[propget] HRESULT IsNetworkAvailable([out][retval] boolean* value);
				HRESULT SendRequest([in] ITLObject* object,[in] UINT32 datacenterId,[in] ConnectionType connetionType,[in] boolean immediate,[out] INT32* requestToken);
				HRESULT CancelRequest(INT32 requestToken, boolean notifyServer);
				HRESULT GetDatacenterById(UINT32 id,[out][retval] Datacenter** value);

				HRESULT BoomBaby([out][retval] Connection** value);
			}

			[static(IConnectionManagerStatics, API_VERSION)]
			[marshaling_behavior(agile)]
			[threading(both)]
			[version(API_VERSION)]
			runtimeclass ConnectionManager
			{
				[default] interface IConnectionManager;
			}


		}
	}
}